package application;

import java.awt.Dimension;
import java.awt.List;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;

import org.apache.commons.codec.binary.Base64;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;

import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.SnapshotParameters;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.image.WritableImage;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.FlowPane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.util.Duration;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;

import org.slf4j.impl.StaticLoggerBinder;
public class FaceDetectController implements Initializable {
	
	
	@FXML 
	private BorderPane webcamPane;
	
	@FXML 
	private Button captureButton;
	
	@FXML 
	private ImageView iv1;
	
	@FXML
	private TextField userNameTF;
	
	@FXML
	private ImageView imgWebCamCapturedImage;
	
	@FXML
	BorderPane bpWebCamPaneHolder;
	
	@FXML
	private Label cdLabel;
	
	@FXML
	private Button readyButton;
	
	@FXML
	private Label resultlabel;
	
	
	
	//
	public void Connect() {
		
		File imgFile = new File("C:\\Users\\kiet-lta\\Downloads\\FaceDetect\\snapshot1.png");
		
		String imgStr = imgToString(imgFile);
		System.out.println(imgStr);
		String userName = userNameTF.getText();
		String userID = "0015";
		String url = "http://172.16.0.39:8000/testimages/";
		
		HttpClient client = HttpClientBuilder.create().build();
		HttpPost post = new HttpPost(url);
		
		String USER_AGENT="Mozilla/5.0";
		// add header
		post.setHeader("User-Agent", USER_AGENT);
		
		BasicNameValuePair f = new BasicNameValuePair("user", "joe");
		ArrayList<NameValuePair> urlParameters = new ArrayList<NameValuePair>(2);
		urlParameters.add(new BasicNameValuePair("img64", imgStr));
		urlParameters.add(new BasicNameValuePair("id", userID));
		urlParameters.add(new BasicNameValuePair("name", userName));
		
		try {
			post.setEntity(new UrlEncodedFormEntity(urlParameters,"UTF-8"));
			HttpResponse response = client.execute(post);
			System.out.println("success");
			
//			HttpEntity entiry = response.getEntity();
//			result = 
            BufferedReader rd = new BufferedReader(new InputStreamReader(
                    response.getEntity().getContent()));
            String line = "";
            while ((line = rd.readLine()) != null) {
                System.out.println(line);
            }
            
            
            
			
		} catch (ClientProtocolException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		String url2 = "http://172.16.0.38:5000/register_user/";
		
	}
	
	public void takeSnapShot2(ImageView scene){
        WritableImage writableImage = new WritableImage((int)600, (int)450);
        scene.snapshot(new SnapshotParameters(), writableImage);
         
        File file = new File("snapshot.png");
        
        try {
            ImageIO.write(SwingFXUtils.fromFXImage(writableImage, null), "png", file);
            System.out.println("snapshot saved: " + file.getAbsolutePath());
        } catch (IOException ex) {
            Logger.getLogger(FaceDetectController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
	
	
	
	public void showPhoto() {
		
		takeSnapShot();
//		File imgFile = new File("C:\\Users\\kiet-lta\\Downloads\\FaceDetect\\snapshot.png");
//        Image img1 = new Image(imgFile.toURI().toString());
//		iv1.setImage(img1);
//		try {
//			File imgFile2 = new File("C:\\Users\\kiet-lta\\Downloads\\FaceDetect\\snapshot.png");
//	        Image img2 = new Image(imgFile2.toURI().toURL().toString());
//			iv1.setImage(img1);
//			String imgRequest;
//			imgRequest = imgToString(imgFile2);
//			
//			Connect(imgRequest);
//			System.out.println(imgRequest);
//		} catch (MalformedURLException e1) {
//			// TODO Auto-generated catch block
//			e1.printStackTrace();
//		}
	}
		
	private class WebCamInfo {

		private String webCamName;
		private int webCamIndex;

		public String getWebCamName() {
			return webCamName;
		}

		public void setWebCamName(String webCamName) {
			this.webCamName = webCamName;
		}

		public int getWebCamIndex() {
			return webCamIndex;
		}

		public void setWebCamIndex(int webCamIndex) {
			this.webCamIndex = webCamIndex;
		}

		@Override
		public String toString() {
			return webCamName;
		}
	}

	private BufferedImage grabbedImage;
	private Webcam selWebCam = null;
	private boolean stopCamera = false;
	private ObjectProperty<Image> imageProperty = new SimpleObjectProperty<Image>();

	private String cameraListPromptText = "Choose Camera";

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {

		ObservableList<WebCamInfo> options = FXCollections.observableArrayList();
		int webCamCounter = 0;
		for (Webcam webcam : Webcam.getWebcams()) {
			WebCamInfo webCamInfo = new WebCamInfo();
			webCamInfo.setWebCamIndex(webCamCounter);
			webCamInfo.setWebCamName(webcam.getName());
			options.add(webCamInfo);
			webCamCounter++;
		}
		
		initializeWebCam(0);
		Platform.runLater(new Runnable() {

			@Override
			public void run() {
				setImageViewSize();
			}
		});

	}

	protected void setImageViewSize() {

	//	double height = bpWebCamPaneHolder.getHeight();
	//	double width = bpWebCamPaneHolder.getWidth();
		imgWebCamCapturedImage.setFitHeight(625);
		imgWebCamCapturedImage.setFitWidth(460);
		imgWebCamCapturedImage.prefHeight(625);
		imgWebCamCapturedImage.prefWidth(460);
		imgWebCamCapturedImage.setPreserveRatio(true);
	}
	
	//Khoi tao webcam va bat dau ket noi
	protected void initializeWebCam(final int webCamIndex) {

		Task<Void> webCamIntilizer = new Task<Void>() {

			@Override
			protected Void call() throws Exception {

				if (selWebCam == null) {
					selWebCam = Webcam.getWebcams().get(webCamIndex);
					selWebCam.setViewSize(new Dimension(640, 480));
					selWebCam.open();
				} else {
					selWebCam.close();
					selWebCam = Webcam.getWebcams().get(webCamIndex);
					selWebCam.setViewSize(new Dimension(640, 480));
					selWebCam.open();
				}
				startWebCamStream();
				return null;
			}

		};

		new Thread(webCamIntilizer).start();
	}
	
	protected void startWebCamStream() {

		stopCamera = false;
		Task<Void> task = new Task<Void>() {

			@Override
			protected Void call() throws Exception {

				while (!stopCamera) {
					try {
						if ((grabbedImage = selWebCam.getImage()) != null) {

							Platform.runLater(new Runnable() {

								@Override
								public void run() {
									final Image mainiamge = SwingFXUtils
										.toFXImage(grabbedImage, null);
									imageProperty.set(mainiamge);
								}
							});

							grabbedImage.flush();

						}
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				return null;
			}

		};
		Thread th = new Thread(task);
		th.setDaemon(true);
		th.start();
		imgWebCamCapturedImage.imageProperty().bind(imageProperty);

	}
	
	public String imgToString(File inputImg) {
		String encodedfile = null;
        try {
            FileInputStream fileInputStreamReader = new FileInputStream(inputImg);
            byte[] bytes = new byte[(int)inputImg.length()];
            fileInputStreamReader.read(bytes);
            encodedfile = new String(Base64.encodeBase64(bytes), "UTF-8");
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return encodedfile;
	}
	
	public String encodeImage(byte[] imageByteArray) {
		return Base64.encodeBase64URLSafeString(imageByteArray);
	}
	
	public void takeSnapShot(){
		
        WritableImage writableImage = new WritableImage((int)640, (int)480);
        
        for(int j=0; j<4; j++) {
        	String cd = "Auto shot in " + (3-j) + "s";
        	Timeline timeline2 = new Timeline(new KeyFrame(Duration.seconds(j+1), ev -> {
        		cdLabel.setText(cd);
        	}));
        	timeline2.play();
        }
        
        Timeline timeline3 = new Timeline(new KeyFrame(Duration.seconds(5), ev -> {
    		cdLabel.setText("");
    	}));
        
    	timeline3.play();
        for(int i=0; i<3; i++) {
        	System.out.println("ss");
        	String imgName = "snapshot" + String.valueOf(i) + ".png";
        	Timeline timeline = new Timeline(new KeyFrame(Duration.seconds(4+1*i+1), ev -> {
        		
        		imgWebCamCapturedImage.snapshot(new SnapshotParameters(), writableImage);
            	
                File file = new File(imgName);
                
                try {
                    ImageIO.write(SwingFXUtils.fromFXImage(writableImage, null), "png", file);
                    System.out.println("snapshot saved: " + file.getAbsolutePath());
                    File imgFile2 = new File("C:\\Users\\kiet-lta\\Downloads\\FaceDetect\\" + imgName);
        	        Image img2 = new Image(imgFile2.toURI().toURL().toString());
        			iv1.setImage(img2);
                } catch (IOException ex) {
                    Logger.getLogger(FaceDetectController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }));
            timeline.play();
        }
   
    }
	
	public void recordDatabase() {
		Connection conn = null;
        try {
            // db parameters
            String url = "jdbc:sqlite:C:\\Users\\kiet-lta\\Downloads\\FaceDetect\\src\\application\\db_1.sqlite3";
            // create a connection to the database
            conn = DriverManager.getConnection(url);
            
            System.out.println("Connection to SQLite has been established.");
            
            String query = "INSERT INTO demo_stafffujinet VALUES (10, 'LTA Kiet', '2018-3-10', 'Junior Staff 1', 1, 'Male', 'unknown', 'unknown', 'unknown')";
            Statement stmt = conn.createStatement();
            stmt.executeUpdate(query);
            
            
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } finally {
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
        }
	}
	// Connect Server 
}
