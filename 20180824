import sys, os, io
import ntpath
import cv2
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets, QtTest
from PyQt5.QtCore import Qt, QSize, QRectF, pyqtSignal, QRect, QPoint, QT_VERSION_STR
from PyQt5.QtWidgets import QVBoxLayout, QApplication, QFrame, QMainWindow, QWidget, QPushButton, QLabel, QGraphicsView, QGraphicsScene, QFileDialog, QRubberBand, QStyleFactory, QHBoxLayout
from PyQt5.QtGui import QPalette, QFont, QImage, QPixmap, QPainterPath, QIcon, QPen, QColor

import tkinter as tk
from functools import partial
import Final_test_tensorflow_2 as ttf 

FILENAME = "Scan/scan (1).png"
DETECT_RESULT = "result/test.png"

root = tk.Tk()
SCEEN_WIDTH = root.winfo_screenwidth()
SCEEN_HEIGHT = root.winfo_screenheight()

WIDTH = 754
HEIGHT = 830
HEADER_HEIGHT = 50
SCAN_HEIGHT = 382
SCAN_WIDTH = 710
SCAN_X = 22
SCAN_Y = 70
TOOLBAR_HEIGHT = 80
TOOLBAR_Y = 450
BUTTON_SIZE = 60
BUTTON_Y = 460
BUTTON_ZOOM_SIZE = 70
BUTTON2_SIZE = 100
BUTTON_HOVER_SIZE = 70
BUTTON2_HOVER_SIZE = 120
BUTTON2_X = 320
BUTTON2_Y = 555
BUTTON2_HOVER_X = 310
BUTTON2_HOVER_Y = 545
FRAME_WIDTH = 200
FRAME_HEIGHT = 80
FRAME_X = 40
FRAME_Y = 565
RESULT_FRAME_X = 520
OPEN_X = 150
OPEN_HOVER_X = 145
OPEN_X = 150
OPEN_HOVER_X = 145
CROP_X = 340
CROP_HOVER_X = 335
OPTION_X = 530
OPTION_HOVER_X = 525
BUTTON_MARGIN = 190
BUTTON_HOVER_Y = 455
PREDICT_LABEL_WIDTH = 90
PREDICT_LABEL_HEIGHT = 20
ICON_SIZE = 40
MINIMIZE_X = 684
CLOSE_X = 719

IMAGEVIEWER_WIDTH = 1268
IMAGEVIEWER_HEIGHT = 896
DELETE_BUTTON_Y = 555
DELETE_BUTTON_X = 230
DELETE_BUTTON_SIZE = 20
DELETE_BUTTON_HOVE_SIZE = 24
FRAME_MARGIN = 85
CHECK_ICON_X = 705
CHECK_ICON_Y = 550
CHECK_ICON_SIZE = 40

COLOR_X = 300
COLOR_Y = 670
COLOR_WIDTH = 150 
COLOR_HEIGHT = 40


if(SCEEN_HEIGHT < 900):
    WIDTH = 538
    HEIGHT = 592
    HEADER_HEIGHT = 36
    SCAN_WIDTH = 508
    SCAN_HEIGHT = 272
    TOOLBAR_HEIGHT = 58
    TOOLBAR_Y = 322
    SCAN_X = 16
    SCAN_Y = 50
    BUTTON_Y = 328
    BUTTON_HOVER_Y = 325
    BUTTON_SIZE = 42
    BUTTON_ZOOM_SIZE = 50
    BUTTON2_Y = 396
    BUTTON2_HOVER_Y = 388
    BUTTON2_X = 228
    BUTTON2_HOVER_X = 221
    BUTTON2_SIZE = 72
    BUTTON2_HOVER_SIZE = 86
    FRAME_HEIGHT = 58
    FRAME_WIDTH = 142
    FRAME_X = 28
    FRAME_Y = 404
    RESULT_FRAME_X = 370
    ICON_SIZE = 28
    MINIMIZE_X = 488
    CLOSE_X = 514

    IMAGEVIEWER_WIDTH = 906
    IMAGEVIEWER_HEIGHT = 640
    DELETE_BUTTON_Y = 396
    DELETE_BUTTON_X = 164
    DELETE_BUTTON_SIZE = 14
    DELETE_BUTTON_HOVER_SIZE = 18
    FRAME_MARGIN = 61
    CHECK_ICON_X = 504
    CHECK_ICON_Y = 392
    CHECK_ICON_SIZE = 28
    OPEN_X = 107
    OPEN_HOVER_X = 104
    CROP_X = 243
    CROP_HOVER_X = 239
    OPTION_X = 378
    OPTION_HOVER_X = 375
    BUTTON_MARGIN = 136

    PREDICT_LABEL_WIDTH = 64
    COLOR_X = 214
    COLOR_Y = 478
    COLOR_WIDTH = 107
    COLOR_HEIGHT = 28

class ResultFrame(QFrame):
    """docstring for ClassName"""
    def __init__(self, parent):
        super(ResultFrame, self).__init__(parent)
        self.parent = parent
        self.initUI()

    def initUI(self):

        self.resize(FRAME_WIDTH, FRAME_HEIGHT)
        # self.setWindowFlags(Qt.FramelessWindowHint)
        self.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.setFrameShadow(QtWidgets.QFrame.Raised)
        self.setObjectName("frame")

        result_label = QLabel(self)
        result_label.setText('Result: ')
        result_label.setStyleSheet("font: 10pt \"MS UI Gothic\";")
        result_label.setGeometry(10, 10, FRAME_HEIGHT, PREDICT_LABEL_HEIGHT)
        result_label.show()

        self.result2_label = QLabel(self)
        self.result2_label.setText('Accuracy: ')
        self.result2_label.setStyleSheet("font: 10pt \"MS UI Gothic\";")
        self.result2_label.setGeometry(10, 35, FRAME_HEIGHT, PREDICT_LABEL_HEIGHT)
        self.result2_label.show()

        self.predict_label = QLabel(self)
        # self.predict_label.setText('98,14')
        self.predict_label.setStyleSheet("font: 10pt \"MS UI Gothic\";")
        self.predict_label.setGeometry(PREDICT_LABEL_WIDTH, 10, PREDICT_LABEL_WIDTH, PREDICT_LABEL_HEIGHT)
        self.predict_label.show()

        self.accuracy_label = QLabel(self)
        # self.accuracy_label.setText('98%')
        self.accuracy_label.setStyleSheet("font: 10pt \"MS UI Gothic\";")
        self.accuracy_label.setGeometry(PREDICT_LABEL_WIDTH, 35, PREDICT_LABEL_WIDTH, PREDICT_LABEL_HEIGHT)
        self.accuracy_label.show()
        
class QExampleLabel(QLabel):
    def __init__(self, parent):
        super(QExampleLabel, self).__init__(parent)
        self.parent = parent
        self.ZOOM_RATIO = 1
        self.initUI()

    def initUI (self):
        img = cv2.imread(FILENAME, 0)
        heightImg, widthImg = img.shape[:2]
        self.setAlignment(Qt.AlignCenter)
        self.setScaledContents(True)
        pixmap = QPixmap(FILENAME)
        self.setPixmap(pixmap)
        print(heightImg, widthImg)

        self.ZOOM_RATIO = float("{0:.2f}".format(widthImg/IMAGEVIEWER_WIDTH))
        # self.resize(1268, 896)

    def mousePressEvent (self, eventQMouseEvent):
        self.originQPoint = eventQMouseEvent.pos()
        self.currentQRubberBand = QRubberBand(QRubberBand.Rectangle, self)
        self.currentQRubberBand.setGeometry(QRect(self.originQPoint, QtCore.QSize()))
        self.currentQRubberBand.show()

    def mouseMoveEvent (self, eventQMouseEvent):
        self.currentQRubberBand.setGeometry(QRect(self.originQPoint, eventQMouseEvent.pos()).normalized())

    def mouseReleaseEvent (self, eventQMouseEvent):

        labelList = [1, 2, 3]
        self.currentQRubberBand.hide()
        currentQRect = self.currentQRubberBand.geometry()
        # print(currentQRect)
        currentQRect = QRect(int(currentQRect.x()*self.ZOOM_RATIO), int(currentQRect.y()*self.ZOOM_RATIO), int(currentQRect.width()*self.ZOOM_RATIO), int(currentQRect.height()*self.ZOOM_RATIO))
        print(currentQRect)
        self.currentQRubberBand.deleteLater()
        if self.parent.parent.COUNT < 3:
            self.parent.parent.COUNT = self.parent.parent.COUNT + 1
            outName = 'output' + str(self.parent.parent.COUNT) + '.png'
            cropQPixmap = self.pixmap().copy(currentQRect)
            cropQPixmap.save(outName)
            self.parent.parent.addImage()
            pixmap = QPixmap(outName)
            self.parent.parent.labelName1[self.parent.parent.COUNT-1].setScaledContents(True)
            self.parent.parent.labelName1[self.parent.parent.COUNT-1].setPixmap(pixmap)
        else: 
            print('full')
        self.parent.close()

class ImageViewer(QMainWindow):
    """docstring for ImageViewer"""
    def __init__(self, parent):
        super(ImageViewer, self).__init__(parent)
        self.parent = parent
        # self.m_DragPosition=self.pos()
        # self.m_drag = False
        img = cv2.imread(FILENAME, 0)
        heightImg, widthImg = img.shape[:2]
        # self.resize(widthImg, heightImg)
        
        # self.label = QExampleLabel(self)
        # self.label.setGeometry(10,10,400,300)
        self.appLayout = QHBoxLayout()
        self.ui = QExampleLabel(self)
        self.ui.resize(IMAGEVIEWER_WIDTH, IMAGEVIEWER_HEIGHT)
        self.appLayout.addWidget(self.ui)

        self.setLayout(self.appLayout)
        self.resize(IMAGEVIEWER_WIDTH, IMAGEVIEWER_HEIGHT)

class BtnTitlebar(QPushButton):
    def __init__(self, *args, **kwargs):
        super(BtnTitlebar, self).__init__(*args, **kwargs)
        self.m_ishover = False
        
    def paintEvent(self, evt):
        super(BtnTitlebar, self).paintEvent(evt)
        
    def isHover(self):
        return self.m_ishover
        
    def enterEvent(self, evt):
        self.m_ishover = True
        
    def leaveEvent(self, evt):
        self.m_ishover = False

class BtnMinimize(BtnTitlebar):
    def __init__(self, *args, **kwargs):
        super(BtnMinimize, self).__init__(*args, **kwargs)
        
    def paintEvent(self, evt):
        super(BtnMinimize, self).paintEvent(evt)
        painter = QtGui.QPainter(self)
        if self.isDown() or self.isHover():
            painter.fillRect(QtCore.QRect(10,14,8,2), QtGui.QColor("#FFFFFF"))
        else:
            painter.fillRect(QtCore.QRect(10,14,8,2), QtGui.QColor("#282828"))

class BtnClose(BtnTitlebar):
    def __init__(self, *args, **kwargs):
        super(BtnClose, self).__init__(*args, **kwargs)
        
    def paintEvent(self, evt):
        super(BtnClose, self).paintEvent(evt)
        painter = QtGui.QPainter(self)
        if self.isDown() or self.isHover():
            painter.setPen(QtGui.QPen(QtGui.QBrush(QtGui.QColor("#FFFFFF")), 1.42))
        else:
            painter.setPen(QtGui.QPen(QtGui.QBrush(QtGui.QColor("#282828")), 1.42))
        
        painter.drawLine(15,10,20,15)
        painter.drawPoint(14,9)
        painter.drawPoint(21,15)
        
        painter.drawLine(20,10,15,15)
        painter.drawPoint(21,9)
        painter.drawPoint(14,15)

class BtnOpen(BtnTitlebar):
    def __init__(self, *args, **kwargs):
        super(BtnOpen, self).__init__(*args, **kwargs)
        
    def paintEvent(self, evt):
        super(BtnOpen, self).paintEvent(evt)
        painter = QtGui.QPainter(self)
        if self.isDown() or self.isHover():
            self.setIcon(QIcon('Icon/openIcon2.png'))
            self.setIconSize(QSize(ICON_SIZE,ICON_SIZE))
            self.resize(BUTTON_ZOOM_SIZE,BUTTON_ZOOM_SIZE)
            self.move(OPEN_HOVER_X,BUTTON_HOVER_Y)
        else:
            self.setIcon(QIcon('Icon/openIcon.png'))
            self.setIconSize(QSize(ICON_SIZE,ICON_SIZE))
            self.resize(BUTTON_SIZE,BUTTON_SIZE)
            self.move(OPEN_X,BUTTON_Y)

class BtnCrop(BtnTitlebar):
    def __init__(self, *args, **kwargs):
        super(BtnCrop, self).__init__(*args, **kwargs)
        
    def paintEvent(self, evt):
        super(BtnCrop, self).paintEvent(evt)
        painter = QtGui.QPainter(self)
        if self.isDown() or self.isHover():
            self.setIcon(QIcon('Icon/cropIcon2.png'))
            self.setIconSize(QSize(BUTTON_ZOOM_SIZE,BUTTON_ZOOM_SIZE))
            self.resize(BUTTON_ZOOM_SIZE,BUTTON_ZOOM_SIZE)
            self.move(CROP_HOVER_X,BUTTON_HOVER_Y)
        else:
            self.setIcon(QIcon('Icon/cropIcon1.png'))
            self.setIconSize(QSize(ICON_SIZE,ICON_SIZE))
            self.resize(BUTTON_SIZE,BUTTON_SIZE)
            self.move(CROP_X,BUTTON_Y)

class BtnDelete(BtnTitlebar):
    def __init__(self, *args, **kwargs):
        super(BtnDelete, self).__init__(*args, **kwargs)
        
    def paintEvent(self, evt):
        super(BtnDelete, self).paintEvent(evt)
        # painter = QtGui.QPainter(self)
        self.setIcon(QIcon('Icon/deleteIcon.png'))
        if self.isDown() or self.isHover():
            self.setIconSize(QSize(DELETE_BUTTON_HOVER_SIZE,DELETE_BUTTON_HOVER_SIZE))
            self.resize(DELETE_BUTTON_HOVER_SIZE,DELETE_BUTTON_HOVER_SIZE)
            self.setStyleSheet("QPushButton{background-color:#000000;"
                                                  "border:none;"
                                                  "border-radius:"+str(DELETE_BUTTON_HOVER_SIZE/2)+"px;}")
        
        else:
            self.setIconSize(QSize(DELETE_BUTTON_SIZE,DELETE_BUTTON_SIZE))
            self.resize(DELETE_BUTTON_SIZE,DELETE_BUTTON_SIZE)
            self.setStyleSheet("QPushButton{background-color:#ffffff;"
                                                  "border:none;"
                                                  "border-radius:"+str(DELETE_BUTTON_SIZE/2)+"px;}")
         
class BtnCheck(BtnTitlebar):
    def __init__(self, *args, **kwargs):
        super(BtnCheck, self).__init__(*args, **kwargs)
        
    def paintEvent(self, evt):
        super(BtnCheck, self).paintEvent(evt)
        self.setIconSize(QSize(CHECK_ICON_SIZE,CHECK_ICON_SIZE))
        self.resize(CHECK_ICON_SIZE,CHECK_ICON_SIZE)
            # self.move(222, 85*(self.parent.COUNT-1)+547)
        self.setStyleSheet("QPushButton{background-color:#000000;"
                                            "border:none;"
                                            "border-radius:"+str(CHECK_ICON_SIZE/2)+"px;}")
     
class BtnOption(BtnTitlebar):
    def __init__(self, *args, **kwargs):
        super(BtnOption, self).__init__(*args, **kwargs)
        
    def paintEvent(self, evt):
        super(BtnOption, self).paintEvent(evt)
        painter = QtGui.QPainter(self)
        if self.isDown() or self.isHover():
            self.setIcon(QIcon('Icon/recognitionIcon1.png'))
            self.setIconSize(QSize(ICON_SIZE,ICON_SIZE))
            self.resize(BUTTON_ZOOM_SIZE,BUTTON_ZOOM_SIZE)
            self.move(OPTION_HOVER_X,BUTTON_HOVER_Y)
        else:
            self.setIcon(QIcon('Icon/recognitionIcon2.png'))
            self.setIconSize(QSize(ICON_SIZE,ICON_SIZE))
            self.resize(BUTTON_SIZE,BUTTON_SIZE)
            self.move(OPTION_X,BUTTON_Y)

class BtnPredict(BtnTitlebar):
    def __init__(self, *args, **kwargs):
        super(BtnPredict, self).__init__(*args, **kwargs)
        
    def paintEvent(self, evt):
        super(BtnPredict, self).paintEvent(evt)
        painter = QtGui.QPainter(self)
        if self.isDown() or self.isHover():
            self.setIcon(QIcon('Icon/eyeIcon2.png'))
            self.setIconSize(QSize(70,70))
            self.resize(BUTTON2_HOVER_SIZE, BUTTON2_HOVER_SIZE)
            self.move(BUTTON2_HOVER_X, BUTTON2_HOVER_Y)
            self.setStyleSheet("QPushButton{background-color:#295e87;"
                                                  "border:none;"
                                                  "font-size:12px;"
                                                  "border-radius:"+str(BUTTON2_HOVER_SIZE/2)+";}")
            
        else:
            self.setIcon(QIcon('Icon/eyeIcon1.png'))
            self.setIconSize(QSize(ICON_SIZE,ICON_SIZE))
            self.resize(BUTTON2_SIZE,BUTTON2_SIZE)
            self.move(BUTTON2_X,BUTTON2_Y)
            self.setStyleSheet("QPushButton{background-color:#295e87;"
                                                  "border:none;"
                                                  "font-size:12px;"
                                                  "border-radius:"+str(BUTTON2_SIZE/2)+"px;}")
         
class MainWindow(QWidget):
    def __init__(self):

        QWidget.__init__(self)

        self.labelName1 = []
        self.btnDelete1 = []
        self.result_frame = []
        self.resultList = []
        self.checkList = []
        self.accList = []
        self.resultList2 = []

        self.COUNT = 0
        self.imgList = [-1, -1, -1]
        self.choose = 0

        self.m_DragPosition=self.pos()
        self.m_drag = False
        
        self.resize(WIDTH,HEIGHT)
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setMouseTracking(True)
        self.setStyleSheet("QWidget{background-color:#2C3E50;}")
     
        qlbl_title = QLabel("Optical character recognition", self)
        qlbl_title.setGeometry(0,0,WIDTH,HEADER_HEIGHT)
        qlbl_title.setStyleSheet("QLabel{background-color:#4a93ca;"
                                    "border:none;"
                                    "color:#ffffff;"
                                    "font:bold;"
                                    "font-size:16px;"
                                    "font-family:Meiryo UI;"
                                    "qproperty-alignment:AlignCenter;}")

        qlbl_title2 = QLabel("", self)
        qlbl_title2.setGeometry(0,TOOLBAR_Y,WIDTH,TOOLBAR_HEIGHT)
        qlbl_title2.setStyleSheet("QLabel{background-color:#3BAFDA;"
                                    "border:none;"
                                    "color:#ffffff;"
                                    "font:bold;"
                                    "font-size:16px;"
                                    "font-family:Meiryo UI;"
                                    "qproperty-alignment:AlignCenter;}")
        
        self.color_label = QLabel("", self)
        self.color_label.setGeometry(COLOR_X, COLOR_Y, COLOR_WIDTH, COLOR_HEIGHT)
        self.color_label.setAlignment(Qt.AlignCenter)
        color_pixmap = QPixmap('Icon/color.PNG')
        self.color_label.setScaledContents(True)
        self.color_label.setPixmap(color_pixmap)


        self.qbtn_minimize=BtnMinimize(self)
        self.qbtn_minimize.setGeometry(MINIMIZE_X,0,28,24)
        self.qbtn_minimize.setStyleSheet("QPushButton{background-color:#4a93ca;"
                                            "border:none;"
                                            "font-size:12px;"
                                            "font-family:Tahoma;}"
                                            "QPushButton:hover{background-color:#295e87;}"
                                            "QPushButton:pressed{background-color:#204a6a;}")
        
        self.qbtn_close=BtnClose(self)
        self.qbtn_close.setGeometry(CLOSE_X,0,36,24)
        self.qbtn_close.setStyleSheet("QPushButton{background-color:#4a93ca;"
                                        "border:none;"
                                        "font-size:12px;"
                                        "font-family:Tahoma;}"
                                        "QPushButton:hover{background-color:#ea5e00;}"
                                        "QPushButton:pressed{background-color:#994005;}")

        self.label = QtWidgets.QLabel(self)
        self.label.setGeometry(QtCore.QRect(SCAN_X, SCAN_Y, SCAN_WIDTH, SCAN_HEIGHT))
        self.label.setStyleSheet("background-color: rgb(255, 251, 124);")
        self.label.setObjectName("label")
        self.label.setAlignment(Qt.AlignCenter)
        pixmap = QPixmap(FILENAME)
        self.label.setScaledContents(True)
        self.label.setPixmap(pixmap)

        self.qbtn_open = BtnOpen(self)
        self.qbtn_open.setGeometry(OPEN_X, BUTTON_Y, BUTTON_SIZE, BUTTON_SIZE)
        self.qbtn_open.setStyleSheet("QPushButton{background-color:#4a93ca;"
                                                  "border:none;"
                                                  "font-size:12px;"
                                                  "font-family:Tahoma;}"
                                      "QPushButton:hover{background-color:#295e87;}"
                                      "QPushButton:pressed{background-color:#204a6a;}")

        self.qbtn_crop = BtnCrop(self)
        self.qbtn_crop.setGeometry(OPEN_X + BUTTON_MARGIN, BUTTON_Y, BUTTON_SIZE, BUTTON_SIZE)
        self.qbtn_crop.setStyleSheet("QPushButton{background-color:#4a93ca;"
                                                  "border:none;"
                                                  "font-size:12px;"
                                                  "font-family:Tahoma;}"
                                      "QPushButton:hover{background-color:#295e87;}"
                                      "QPushButton:pressed{background-color:#204a6a;}")

        self.qbtn_option = BtnOption(self)
        self.qbtn_option.setGeometry(OPEN_X + BUTTON_MARGIN*2, BUTTON_Y ,BUTTON_SIZE,BUTTON_SIZE)
        self.qbtn_option.setStyleSheet("QPushButton{background-color:#4a93ca;"
                                                  "border:none;"
                                                  "font-size:12px;"
                                                  "font-family:Tahoma;}"
                                      "QPushButton:hover{background-color:#295e87;}"
                                      "QPushButton:pressed{background-color:#204a6a;}")

        self.qbtn_predict = BtnPredict(self)
        self.qbtn_predict.setGeometry(BUTTON2_X,BUTTON2_Y,BUTTON2_SIZE,BUTTON2_SIZE)
        self.qbtn_predict.setStyleSheet("QPushButton{background-color:#295e87;"
                                                  "border:none;"
                                                  "font-size:12px;"
                                                  "border-radius:50px;"
                                                  "font-family:Tahoma;}"
                                      "QPushButton:hover{background-color:#4a93ca;}"
                                      "QPushButton:pressed{background-color:#204a6a;}")

        self.qbtn_minimize.clicked.connect(self.btnClicked_minimize)
        self.qbtn_close.clicked.connect(self.btnClicked_close)
        self.qbtn_open.clicked.connect(self.openFile)
        self.qbtn_crop.clicked.connect(self.openWindow)
        self.qbtn_option.clicked.connect(self.addImage)
        self.qbtn_predict.clicked.connect(self.predict)

        self.ImageViewer = ImageViewer(self)

        root_width = root.winfo_screenwidth()
        root_height = root.winfo_screenheight()
        print(root_width, root_height)

    # reload method to support window draging
    def mousePressEvent(self, event):
        if event.button()==Qt.LeftButton:
            self.m_drag=True
            self.m_DragPosition=event.globalPos()-self.pos()
            event.accept()

    def mouseMoveEvent(self, QMouseEvent):
        if QMouseEvent.buttons() and Qt.LeftButton and self.m_drag:
            self.move(QMouseEvent.globalPos()-self.m_DragPosition)
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_drag=False

    def btnClicked_minimize(self):
        self.showMinimized()

    def btnClicked_close(self):
        os._exit(0)

    def openFile(self):
        if QT_VERSION_STR[0] == '4':
            fileName2 = QFileDialog.getOpenFileName(None, "Open image file...", './Scan', "(*.PNG)")
        elif QT_VERSION_STR[0] == '5':
            fileName2, dummy = QFileDialog.getOpenFileName(None, "Open image file...", './Scan', "(*.PNG)")

        FILENAME = fileName2
        pixmap = QPixmap(FILENAME)
        # pixmap = pixmap.scaledToWidth(1268)
        self.label.setScaledContents(True)
        self.label.setPixmap(pixmap)
        im = cv2.imread(fileName2, 0)
        heightIm, widthIm = im.shape[:2]
        self.ImageViewer.ui.setPixmap(pixmap)

        self.ImageViewer.ui.ZOOM_RATIO = float("{0:.2f}".format(widthIm/IMAGEVIEWER_WIDTH))
        # self.ImageViewer.ui.resize(1268, 896)
        # self.ImageViewer.resize(1268, 896)

    def openWindow(self):

        self.ImageViewer.show()

    def addImage(self):

        labelName = QLabel(self)
        labelName.setGeometry(QtCore.QRect(FRAME_X, FRAME_MARGIN*(self.COUNT-1) + FRAME_Y, FRAME_WIDTH, FRAME_HEIGHT))
        labelName.setStyleSheet("border:4px solid rgb(0, 0, 0); background-color: rgb(255, 0, 0);")
        labelName.setAlignment(Qt.AlignCenter)
        labelName.setObjectName(str(self.COUNT))
        # labelName.show()
        
        btnDelete = BtnDelete(self)
        btnDelete.setObjectName(str(self.COUNT))
        btnDelete.setGeometry(DELETE_BUTTON_X, FRAME_MARGIN*(self.COUNT-1) + DELETE_BUTTON_Y, DELETE_BUTTON_SIZE, DELETE_BUTTON_SIZE)
        btnDelete.setStyleSheet("QPushButton{background-color:#ffffff;"
                                                  "border:none;"
                                                  "font-size:12px;"
                                                  "border-radius:"+str(DELETE_BUTTON_SIZE/2)+"px;"
                                                  "font-family:Tahoma;}")
        
        self.labelName1.append(labelName)
        self.labelName1[self.COUNT-1].show()
    
        self.btnDelete1.append(btnDelete)
        self.btnDelete1[self.COUNT-1].clicked.connect(partial(self.deleteImage, self.btnDelete1[self.COUNT-1]))
        self.btnDelete1[self.COUNT-1].show()

    def deleteImage(self, btn):

        name = btn.objectName()
        posi = int(name)
      
        if(posi == self.COUNT):
            self.labelName1[posi-1].deleteLater()
            self.btnDelete1[posi-1].deleteLater()
            del self.labelName1[posi-1]
            del self.btnDelete1[posi-1]
            os.remove('output' + str(posi) + '.png')
            if(len(self.result_frame) == posi):
                self.result_frame[posi-1].deleteLater()
                del self.result_frame[posi-1]
                del self.resultList[posi-1]
                del self.resultList2[posi-1]
                del self.accList[posi-1]

                self.checkList[posi-1].deleteLater()
                del self.checkList[posi-1]

        else:
            for i in range(self.COUNT, posi-1, -1):
                self.labelName1[i-1].deleteLater()
                self.btnDelete1[i-1].deleteLater()
                del self.labelName1[i-1]
                del self.btnDelete1[i-1]

            os.remove('output' + str(posi) + '.png')
        
            for i in range(posi, self.COUNT):  
                os.rename('output' + str(i+1) + '.png', 'output' + str(i) + '.png')
            
            if(len(self.resultList) >= posi):
                # print('Del 1')
                for i in range(len(self.resultList), posi-1, -1):
                    print(i)
                    self.result_frame[i-1].deleteLater()
                    del self.result_frame[i-1]

                    self.checkList[i-1].deleteLater()
                    del self.checkList[i-1]
                # print('-------')
                os.remove('result/detect_result' + str(posi) + '.png')
                # print('Del 2')
                for i in range(posi, len(self.resultList)):
                    # print(i)
                    self.resultList[i-1] = self.resultList[i]
                    self.resultList2[i-1] = self.resultList2[i]
                    self.accList[i-1] = self.accList[i]
                    os.rename('result/detect_result' + str(i+1) + '.png', 'result/detect_result' + str(i) + '.png')
                # print('-------')
                del self.resultList[len(self.resultList) - 1]
                del self.resultList2[len(self.resultList2) - 1]
                del self.accList[len(self.resultList) - 1]

            # print('Add')
            for i in range(posi, self.COUNT):
                # print(i)
                labelName = QLabel(self)
                labelName.setGeometry(QtCore.QRect(FRAME_X, FRAME_MARGIN*(i-1) + FRAME_Y, FRAME_WIDTH, FRAME_HEIGHT))
                labelName.setStyleSheet("border:4px solid rgb(0, 0, 0); background-color: rgb(255, 255, 255)")
                labelName.setAlignment(Qt.AlignCenter)
                pixmap = QPixmap('output'+str(i)+'.png')
                if(i<=len(self.resultList)):
                    pixmap = QPixmap('result/detect_result'+str(i)+'.png')
                # print(str(i)+" "+str(len(self.resultList)))
                labelName.setScaledContents(True)
                labelName.setPixmap(pixmap)
                labelName.setObjectName(str(i))
                labelName.show()
                
                btnDelete = BtnDelete(self)
                btnDelete.setObjectName(str(i))
                btnDelete.setGeometry(DELETE_BUTTON_X, FRAME_MARGIN*(i-1) + DELETE_BUTTON_Y,DELETE_BUTTON_SIZE,DELETE_BUTTON_SIZE)
                btnDelete.setStyleSheet("QPushButton{background-color:#ffffff;"
                                                          "border:none;"
                                                          "font-size:12px;"
                                                          "border-radius:15px;"
                                                          "font-family:Tahoma;}")
                 
                self.labelName1.append(labelName)
                self.labelName1[i-1].show()
            
                self.btnDelete1.append(btnDelete)
                self.btnDelete1[i-1].clicked.connect(partial(self.deleteImage, self.btnDelete1[i-1]))
                self.btnDelete1[i-1].show()

            if(len(self.resultList) > posi-1):
                # print('Del 3')
                for i in range(posi, len(self.resultList)+1):
                    # print("new " + str(i))
                    resultFrame = ResultFrame(self)
                    resultFrame.predict_label.setText(self.resultList2[i-1])
                    resultFrame.accuracy_label.setText(str(self.accList[i-1]))
                    # ResultFrame.setObjectName(str(i))
                    resultFrame.setGeometry(QRect(RESULT_FRAME_X, (i-1)*FRAME_MARGIN + FRAME_Y, FRAME_WIDTH, FRAME_HEIGHT))
                    self.result_frame.append(resultFrame)
                    
                    checkIcon = BtnCheck(self)    
                    if self.accList[i-1] >= 98:
                        checkIcon.setIcon(QIcon('Icon/checkIcon.png'))
                        self.result_frame[i-1].setStyleSheet("border:2px solid rgb(79, 229, 164); background-color: rgb(255, 255, 255)")
                    if self.accList[i-1] >= 90 and self.accList[i-1] < 98:
                        checkIcon.setIcon(QIcon('Icon/checkIcon2.png'))
                        self.result_frame[i-1].setStyleSheet("border:2px solid rgb(243, 204, 43); background-color: rgb(255, 255, 255)")
                    if self.accList[i-1] < 90:
                        checkIcon.setIcon(QIcon('Icon/checkIcon3.png'))
                        self.result_frame[i-1].setStyleSheet("border:2px solid rgb(243, 1, 16); background-color: rgb(255, 255, 255)")

                    checkIcon.setGeometry(QRect(CHECK_ICON_X, (i-1)*FRAME_MARGIN + FRAME_Y, ICON_SIZE, ICON_SIZE))
                    self.checkList.append(checkIcon)
                    self.result_frame[i-1].show()
                    self.checkList[i-1].show()

        self.COUNT = self.COUNT - 1

    def DeleteResultFrame(self, posi):
        self.labelName1[posi-1].deleteLater()
        self.btnDelete1[posi-1].deleteLater()
        del self.labelName1[posi-1]
        del self.btnDelete1[posi-1]
        os.remove('output' + str(posi) + '.png')
        for i in range(posi, self.COUNT):  
            os.rename('output' + str(i+1) + '.png', 'output' + str(i) + '.png')
 
    def predict(self):
        # print(self.COUNT) 
        if(self.COUNT > 0):
            # print('step 1')
            # print(len(self.result_frame))
            # print(len(self.resultList))
            # print(len(self.accList))
            # print("---------")
            if(len(self.result_frame) > 0):
                # print('step 2')
                for i in range(len(self.result_frame), 0, -1):
                    # print(i)
                    self.result_frame[i-1].deleteLater()
                    del self.result_frame[i-1]
                    del self.resultList[i-1]
                    del self.resultList2[i-1]
                    del self.accList[i-1]

                    self.checkList[i-1].deleteLater()
                    del self.checkList[i-1]
            #     print("---------")
            # print('step 3')
            for i in range(1, self.COUNT+1):
                
                Result_message = ttf.detect_number('output'+str(i)+'.png')
                # print(type(Result_message['code']))
                if(Result_message != None):
                    text_temp = "<font face='tahoma'>"
                    pre = Result_message['value']
                    acc = Result_message['accuracy']
                    probaList = Result_message['proba']
                    numberList = Result_message['number']

                    print('===========')
                    for k in range(0, len(numberList)):
                        print(probaList[k])
                        if probaList[k] >= 0.98:
                            # print('sw1')
                            text_temp = text_temp + "<span style='color:#00A329'>" + str(numberList[k]) + "</span>"
                        if probaList[k] >= 0.94 and probaList[k] < 0.98:
                            text_temp = text_temp + "<span style='color:#E6CF00'>" + str(numberList[k]) + "</span>"
                        if probaList[k] >= 0.9 and probaList[k] < 0.94:
                            text_temp = text_temp + "<span style='color:#E68200'>" + str(numberList[k]) + "</span>"
                        if probaList[k] >= 0.8 and probaList[k] < 0.9:
                            text_temp = text_temp + "<span style='color:#D61900'>" + str(numberList[k]) + "</span>"
                        if probaList[k] < 0.8:
                            text_temp = text_temp + "<span style='color:#0F0300'>" + str(numberList[k]) + "</span>"


                    text_temp = text_temp + "</font>"
                    # print(text_temp)
                    pixmap = QPixmap('result/detect_result' + str(i) + '.png')
                    self.labelName1[i-1].setPixmap(pixmap)

                    acc = float("{0:.4f}".format(acc))
                    self.resultList.append(pre)
                    self.resultList2.append(text_temp)
                    self.accList.append(acc)
                    resultFrame = ResultFrame(self)
                    # ResultFrame.setObjectName(str(i))
                    resultFrame.setGeometry(QRect(RESULT_FRAME_X, (i-1)*FRAME_MARGIN + FRAME_Y, FRAME_WIDTH, FRAME_HEIGHT))
                    resultFrame.predict_label.setText(text_temp)
                    resultFrame.accuracy_label.setText(str(acc))
                    self.result_frame.append(resultFrame)
                    # self.result_frame[i-1].show()   

                    checkIcon = BtnCheck(self)    
                    if self.accList[i-1] >= 98:
                        checkIcon.setIcon(QIcon('Icon/checkIcon.png'))
                        self.result_frame[i-1].setStyleSheet("border:4px solid rgb(79, 229, 164); background-color: rgb(255, 255, 255)")
                    if self.accList[i-1] >= 90 and self.accList[i-1] < 98:
                        checkIcon.setIcon(QIcon('Icon/checkIcon2.png'))
                        self.result_frame[i-1].setStyleSheet("border:4px solid rgb(243, 204, 43); background-color: rgb(255, 255, 255)")
                    if self.accList[i-1] < 90:
                        checkIcon.setIcon(QIcon('Icon/checkIcon3.png'))
                        self.result_frame[i-1].setStyleSheet("border:4px solid rgb(243, 1, 16); background-color: rgb(255, 255, 255)")
                    checkIcon.setGeometry(QRect(CHECK_ICON_X, (i-1)*FRAME_MARGIN + CHECK_ICON_Y, CHECK_ICON_SIZE, CHECK_ICON_SIZE))
                    self.checkList.append(checkIcon)
                    self.result_frame[i-1].show() 
                    self.checkList[i-1].show()

                else:
                    print('===========')

                    # print(text_temp)
                    pixmap = QPixmap('result/detect_result' + str(i) + '.png')
                    self.labelName1[i-1].setPixmap(pixmap)

                    self.resultList.append("")
                    self.resultList2.append("")
                    self.accList.append(0)
                    resultFrame = ResultFrame(self)
                    # ResultFrame.setObjectName(str(i))
                    resultFrame.setGeometry(QRect(RESULT_FRAME_X, (i-1)*FRAME_MARGIN + FRAME_Y, FRAME_WIDTH, FRAME_HEIGHT))
                    resultFrame.predict_label.setText("")
                    resultFrame.accuracy_label.setText(str(""))
                    self.result_frame.append(resultFrame)
                    # self.result_frame[i-1].show()   

                    checkIcon = BtnCheck(self)    
                    
                    checkIcon.setIcon(QIcon('Icon/checkIcon3.png'))
                    self.result_frame[i-1].setStyleSheet("border:4px solid rgb(243, 1, 16); background-color: rgb(255, 255, 255)")
                    
                    checkIcon.setGeometry(QRect(CHECK_ICON_X, (i-1)*FRAME_MARGIN + CHECK_ICON_Y, CHECK_ICON_SIZE, CHECK_ICON_SIZE))
                    self.checkList.append(checkIcon)
                    self.result_frame[i-1].show() 
                    self.checkList[i-1].show()


def showdialog():
   msg = QMessageBox()
   msg.setIcon(QMessageBox.Information)

   msg.setText("This is a message box")
   msg.setInformativeText("This is additional information")
   msg.setWindowTitle("MessageBox demo")
   msg.setDetailedText("The details are as follows:")
   msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
   msg.buttonClicked.connect(msgbtn)
    
   retval = msg.exec_()
   print ("value of pressed message box button:", retval)

if __name__=="__main__":
    mapp=QtGui.QApplication(sys.argv)
    mw=MainWindow()
    mw.show()
    sys.exit(app.exec_())
