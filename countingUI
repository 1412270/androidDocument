import sys, os, io
import ntpath
import cv2
import numpy as np
import csv
import glob
import subprocess as sp
import json
from pathlib import Path
from PyQt5 import QtCore, QtGui, QtWidgets, QtTest
from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer
from PyQt5.QtMultimediaWidgets import QVideoWidget, QGraphicsVideoItem
from PyQt5.QtCore import QDir, Qt, QUrl, Qt, QSize, QSizeF, QRectF, pyqtSignal, QRect, QPoint, QT_VERSION_STR
from PyQt5.QtWidgets import QGridLayout, QTabWidget, QSizePolicy, QSizePolicy, QSlider, QStyle, QMessageBox, QLineEdit, QVBoxLayout, QApplication, QAction, QTableWidgetItem, QFrame, QMainWindow, QTableWidget, QWidget, QTextEdit, QPushButton, QLabel, QGraphicsView, QGraphicsScene, QFileDialog, QRubberBand, QStyleFactory, QHBoxLayout, QListWidget, QScrollArea
from PyQt5.QtGui import QPalette, QFont, QImage, QPixmap, QPainterPath, QIcon, QPen, QColor, QPainter, QScreen
from pymediainfo import MediaInfo
# from moviepy.video.io.ffmpeg_tools import ffmpeg_extract_subclip

IMAGEVIEWER_WIDTH = 480
IMAGEVIEWER_HEIGHT = 320
BUTTON_ZOOM_SIZE = 70
ICON_SIZE = 100
COLOR_RUBBER = [Qt.red, Qt.blue, Qt.green, Qt.yellow, Qt.gray]
COLOR_LABEL = ["red", "blue", "green", "yellow", "gray"]

def onclick(event):
    global clicks
    clicks.append(event.xdata)

def checkInfo(store, day, begin, durant):
    message = ""
    if store == "":
        message = "Nhap ten cua hang"
    if day == "":
        message = "Nhap ngay"

class tab1(QWidget):
    def __init__(self, parent):
        super(tab1, self).__init__(parent)
        self.parent = parent
        self.layout = QGridLayout()
        # self.layout.setSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.Preferred)

        self.video_list = video_list(self)
        self.video_player = videoplayer(self)
        self.btn_group = btn_group(self)
        self.detail = inforBox(self)
        self.setStyleSheet("QWidget{background-color: #ffffff;}")
        # layouts
        self.layout = QtWidgets.QGridLayout(self)
        self.layout.addWidget(self.video_list, 0, 0, 3, 1)
        self.layout.addWidget(self.video_player, 0, 1)
        self.layout.addWidget(self.detail, 1, 1)
        self.layout.addWidget(self.btn_group, 2, 1)

        self.layout.setColumnStretch(0, 1)
        self.layout.setColumnStretch(1, 3)
        self.layout.setRowStretch(0, 6)
        self.layout.setRowStretch(1, 1)
        self.layout.setRowStretch(2, 1)
        self.layout.setRowStretch(3, 2)   

        self.setLayout(self.layout)

class tab2(QWidget):
    def __init__(self, parent):
        super(tab2, self).__init__(parent)
        self.parent = parent
        self.layout = QGridLayout(self)
        self.layout.setContentsMargins(80,80,80,80)
        # self.layout.setSpacing(20)
        self.header_label = QLabel("Cac thong tin mac dinh")
        self.header_label.setStyleSheet("QLabel{font: 30pt Comic Sans MS; font-weight: bold;}")
        self.location_label = QLabel("Thu muc video mac dinh")
        self.location_label.setStyleSheet("QLabel{font: 20pt Comic Sans MS; font-weight: bold;}")
        self.location_default = QLabel(self.parent.parent.DIRECTION)
        self.location_default.setStyleSheet("QLabel{font: 18pt Arial; font-weight: bold; color: green}")
        self.store_label = QLabel("Cua hang mac dinh")
        self.store_label.setStyleSheet("QLabel{font: 20pt Comic Sans MS; font-weight: bold;}")

        self.store_default = QLabel(self.parent.parent.STORE)
        self.store_new = QLineEdit(self.parent.parent.STORE)
        self.output_label = QLabel("Thu muc luu mac dinh")
        self.output_label.setStyleSheet("QLabel{font: 20pt Comic Sans MS; font-weight: bold;}")
        self.output_default = QLabel(self.parent.parent.OUTPUT)
        self.output_default.setStyleSheet("QLabel{font: 18pt Arial; font-weight: bold; color: blue}")
        self.location_btn = QPushButton("Change default video folder")
        self.location_btn.setStyleSheet("QPushButton{background-color: #2f65bc;}")
        self.location_btn.setSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.Preferred)
        self.output_btn = QPushButton("Change default output folder")
        self.output_btn.setSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.Preferred)
        self.output_btn.setStyleSheet("QPushButton{background-color: #2f65bc;}")
        self.save_store = QPushButton("Save change")
        
        self.layout.addWidget(self.header_label, 0, 0, 1, 2)  
        self.layout.addWidget(self.location_label, 1, 0, 1, 1)
        self.layout.addWidget(self.location_default, 2, 0, 1, 1)
        self.layout.addWidget(self.location_btn, 1, 1, 2, 1)
        self.layout.addWidget(self.output_label, 3, 0)
        self.layout.addWidget(self.output_default, 4, 0)
        self.layout.addWidget(self.output_btn, 3, 1, 2, 1)
        self.layout.addWidget(self.store_label, 5, 0)
        self.layout.addWidget(self.store_default, 6, 0)
        self.layout.addWidget(self.store_new, 5, 1)
        self.layout.addWidget(self.save_store, 6, 1)

        # self.layout.addWidget.setMargin
        self.layout.setColumnStretch(0, 3)
        self.layout.setColumnStretch(1, 1)
        self.layout.setRowStretch(8, 3)
        self.setLayout(self.layout)

        self.location_btn.clicked.connect(self.changeVideoLocation)
        self.output_btn.clicked.connect(self.changeOutputLocation)
        self.save_store.clicked.connect(self.changeStoreName)

        with open("config.txt", 'r') as file:
            self.lines = file.readlines()

    def changeVideoLocation(self):
        fileName = str(QFileDialog.getExistingDirectory(self, "Select Directory"))
        newLocation = fileName + "/"
        self.location_default.setText(newLocation)
        self.parent.parent.DIRECTION = newLocation
        self.lines[0] = newLocation + "\n"
        with open("config.txt", 'w') as file:
            file.writelines(self.lines)
        self.parent.parent.tab.tab1.video_list.changeDirection(newLocation)

    def changeOutputLocation(self):
        fileName = str(QFileDialog.getExistingDirectory(self, "Select Directory"))
        newOutput = fileName + "/"
        self.output_default.setText(newOutput)
        self.parent.parent.OUTPUT = newOutput
        self.lines[1] = newOutput + "\n"
        with open("config.txt", 'w') as file:
            file.writelines(self.lines)

    def changeStoreName(self):
        self.parent.parent.STORE = self.store_new.getText()
        self.lines[2] = self.store_new.text() + "\n"
        with open("config.txt", 'w') as file:
            file.writelines(self.lines)

class mainTab(QTabWidget):
    def __init__(self, parent):
        super(mainTab, self).__init__(parent)
        self.parent = parent
        self.setTabPosition(2)
        # self.setStyleSheet("QTabWidget{background-color: #6b7789;}")

        self.tab1 = tab1(self)
        self.tab1.setSizePolicy(QSizePolicy.MinimumExpanding,QSizePolicy.Preferred)
        self.tab2 = tab2(self)
        self.tab3 = QWidget()
        self.addTab(self.tab1, "")
        self.addTab(self.tab2, "")
        self.addTab(self.tab3, "")
        self.setTabIcon(0,QIcon('Icon/doorIcon.png'))
        self.setTabIcon(1,QIcon('Icon/penIcon.png'))
        self.setTabIcon(2,QIcon('Icon/aboutIcon.png'))
        self.setIconSize(QSize(120,120))

        self.tab3.layout = QGridLayout()
    
class resultTable(QTableWidget):
     """docstring for resultTable"""
     def __init__(self, parent):
        super(resultTable, self).__init__(parent)
        self.parent = parent
        self.setRowCount(2)
        self.setColumnCount(3)

        header_labels = ['Time', 'In', 'Out']
        self.setHorizontalHeaderLabels(header_labels)
        row = 2
        column = 3
        for i in range(0, 2):
            for j in range(0, 3):
                self.setItem(i,j, QTableWidgetItem(str(i*j)))

class inforBox(QWidget):
    def __init__(self, parent):
        super(inforBox, self).__init__(parent)
        self.layout = QtWidgets.QGridLayout(self)
        self.setStyleSheet("QWidget{background-color: #838b99}")
        self.initUI()

    def initUI(self):
        store_label = QLabel("Ten cua hang: ", self)
        day_label = QLabel("Ngay kiem tra: ", self)
        time_label = QLabel("Gio bat dau: ", self)
        duration_label = QLabel("Do dai moi lan dem: ", self)

        store_text = QLineEdit(self)
        day_text = QLineEdit(self)
        time_text = QLineEdit(self)
        duration_text = QLineEdit(self)
        self.layout.addWidget(store_label, 0, 0)
        self.layout.addWidget(store_text, 0, 1)
        self.layout.addWidget(day_label, 1, 0)
        self.layout.addWidget(day_text, 1, 1)
        self.layout.addWidget(time_label, 0, 2)
        self.layout.addWidget(time_text, 0, 3)
        self.layout.addWidget(duration_label, 1, 2)
        self.layout.addWidget(duration_text, 1, 3)

class ConfigWidget(QWidget):
    """docstring for ConfigWidget"""
    def __init__(self, parent):
        super(ConfigWidget, self).__init__(parent)
        self.parent = parent

        self.layout = QGridLayout(self)
        self.set_location_label = QLabel("Set default location of video folder: ")
        self.set_model_label = QLabel("Set default model used: ")
        self.set_store_label = QLabel("Set default store name: ")
        self.set_duration_label = QLabel("Set default duration of video: ")
        
def secondToMunite(sec):
    m = int(sec/60)
    s = sec - m*60
    result = str(m) + ":" + str(s)
    return result

class BtnTitlebar(QPushButton):
    def __init__(self, *args, **kwargs):
        super(BtnTitlebar, self).__init__(*args, **kwargs)
        self.m_ishover = False
        
    def paintEvent(self, evt):
        super(BtnTitlebar, self).paintEvent(evt)
        
    def isHover(self):
        return self.m_ishover
        
    def enterEvent(self, evt):
        self.m_ishover = True
        
    def leaveEvent(self, evt):
        self.m_ishover = False
     
class btn_group(QWidget):
    def __init__(self, parent):
        super(btn_group, self).__init__(parent)
        self.parent = parent
        self.layout = QHBoxLayout(self)
        self.layout.setAlignment(Qt.AlignTop)
        self.setStyleSheet("QWidget{background-color:#1c3c82;"
                                    "color:#ffffff;"
                                    "font:bold;"
                                    "font-size:16px;"
                                    "font-family:Meiryo UI;"
                                    "qproperty-alignment:AlignCenter;}")
        # self.til = "hello"
        # self.setWidgetResizable(True)
        self.initUI()

    def initUI(self):
        self.btn_start = QPushButton("Start Counting", self)
        self.btn_export = QPushButton("Export CSV", self)

        self.layout.addWidget(self.btn_start)
        self.layout.addWidget(self.btn_export)
        self.btn_start.clicked.connect(self.parent.parent.parent.startCounting)
        self.btn_export.clicked.connect(self.parent.parent.parent.exportCSV)
        self.setLayout(self.layout)

class video_item(QWidget):
    def __init__(self, location, duration, parent):
        super(video_item, self).__init__(parent)
        self.parent = parent
        self.location = location
        videopath = location.split('/')
        self.name = videopath[len(videopath) - 1]
        print(self.name)
        self.layout = QVBoxLayout(self)
        self.duration = duration
        self.setLayout(self.layout)
        self.initUI(self.name, duration)

    def initUI(self, name, duration):
        
        # name_frame = frame_label(self)
        # duration_frame = frame_label(self)
        name_label = QLabel(str(name), self)
        name_label.setStyleSheet("QLabel{background-color:#4a93ca;"
                                    "border:none;"
                                    "color:#ffffff;"
                                    "font:bold;"
                                    "font-size:16px;"
                                    "font-family:Meiryo UI;"
                                    "qproperty-alignment:AlignCenter;}")
        duration_label = QLabel(str(duration), self)
        duration_label.setStyleSheet("QLabel{background-color:#3BAFDA;"
                                    "border:none;"
                                    "color:#ffffff;"
                                    "font:bold;"
                                    "font-size:16px;"
                                    "font-family:Meiryo UI;"
                                    "qproperty-alignment:AlignCenter;}")

        self.layout.addWidget(name_label)
        self.layout.addWidget(duration_label)
        self.layout.setStretch(0, 2)
        self.layout.setStretch(1, 1)

    def mousePressEvent(self, event):
        self.parent.parent.VIDEO = self.location
        self.parent.parent.Length = self.duration
        self.parent.parent.video_player.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile(self.location)))
        self.parent.parent.video_player.positionSlider2.setRange(0, int(self.duration))

class video_list(QScrollArea):
    def __init__(self, parent):
        super(video_list, self).__init__(parent)
        widget = QWidget()
        self.parent = parent
        self.layout = QVBoxLayout(widget)
        # self.layout.setAlignment(Qt.AlignTop)
        self.itemList = []
        self.setWidget(widget)
        self.setWidgetResizable(True)
        self.count = 0 
        self.initUI()

    def initUI(self):
        self.btn_folder = QPushButton("Change directory") 
        self.btn_folder.setStyleSheet("QPushButton{background-color: #2f65bc;}")
        self.layout.addWidget(self.btn_folder)

        # videopath = self.parent.parent.parent.DIRECTION.split("/")
        # path = videopath[len(videopath) - 1]
        
        for file in Path(self.parent.parent.parent.DIRECTION).glob("*.MP4"):
            media_info = MediaInfo.parse(file)
            duration_in_ms = media_info.tracks[0].duration
            duration = int(duration_in_ms/1000)
            self.addVideo(str(file), duration)
            self.count = self.count + 1

        self.btn_folder.clicked.connect(self.changeDirection)

    def addVideo(self, filename, duration):

        video = video_item(filename,duration,parent=self)
        self.itemList.append(video)
        self.layout.addWidget(video,3)

    def changeDirection(self, newfolder):
        for i in reversed(range(self.layout.count()-1)): 
            self.layout.itemAt(i).widget().setParent(None)

        self.count = 0
        print("new Directory: " + str(newfolder))
        for file in glob.glob(str(newfolder) + "/*.MP4"):
            print(file)
            # videoname = file.split('/')
            # name = videoname[len(videoname) - 1]
            media_info = MediaInfo.parse(file)
            duration_in_ms = media_info.tracks[0].duration
            duration = int(duration_in_ms/1000)
            print('duration: ' + str(duration))
            self.addVideo(str(file), duration)
            self.count = self.count + 1

class frame_label(QFrame):
    def __init__(self, parent):
        super(frame_label, self).__init__(parent)
        self.parent = parent

class videoplayer(QWidget):
    def __init__(self, parent):
        super(videoplayer, self).__init__(parent)

        self.parent = parent
        self.beginPoint = 0

        videoItem = QGraphicsVideoItem()
        videoItem.setSize(QSizeF(540,240))

        # videoItem.setSize(QSizeF(640, 480))
        scene = QGraphicsScene(self)
        scene.addItem(videoItem)
        graphicsView = QGraphicsView(scene)

        self.mediaPlayer = QMediaPlayer(None, QMediaPlayer.VideoSurface)
        self.mediaPlayer.setVideoOutput(videoItem)
        self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile(str(self.parent.parent.parent.VIDEO))))
        # videoWidget = QVideoWidget()

        self.playButton = QPushButton()
        self.playButton.setEnabled(True)
        self.playButton.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.playButton.clicked.connect(self.play)

        self.positionSlider = QSlider(Qt.Horizontal)
        self.positionSlider.sliderMoved.connect(self.setPosition)
        self.positionSlider2 = QSlider(Qt.Horizontal)
        self.timeLabel = QLabel("00:00")
        self.positionSlider2.setRange(0, 274)
        # self.positionSlider2.setStyleSheet("QSlider{color: blue;}")
        self.positionSlider2.sliderMoved.connect(self.valuechange)

        controlLayout = QtWidgets.QGridLayout(self)
        controlLayout.addWidget(self.playButton, 0, 0)
        controlLayout.addWidget(self.positionSlider, 0, 1)
        controlLayout.addWidget(self.positionSlider2, 1, 1)
        controlLayout.addWidget(self.timeLabel, 1, 0)

        controlLayout.setRowStretch(0, 1)
        controlLayout.setRowStretch(1, 1)
        controlLayout.setColumnStretch(0, 1)
        controlLayout.setColumnStretch(1, 10)

        control_wid = QWidget(self)
        control_wid.setLayout(controlLayout)

        layout = QVBoxLayout()
        layout.addWidget(graphicsView)
        layout.addWidget(control_wid)
        layout.setStretch(0, 4)
        layout.setStretch(1, 1)
        # layout.addWidget(self.positionSlider2)

        self.setLayout(layout)
        self.mediaPlayer.stateChanged.connect(self.mediaStateChanged)
        self.mediaPlayer.positionChanged.connect(self.positionChanged)
        self.mediaPlayer.durationChanged.connect(self.durationChanged)
        
        # self.playButton.setEnabled(True)
    
    # def valuechange(self):
    #   self.beginPoint = self.sl.value()

    def play(self):
        if self.mediaPlayer.state() == QMediaPlayer.PlayingState:
            self.mediaPlayer.pause()
        else:
            self.mediaPlayer.play()

    def mediaStateChanged(self, state):
        if self.mediaPlayer.state() == QMediaPlayer.PlayingState:
            self.playButton.setIcon(
                    self.style().standardIcon(QStyle.SP_MediaPause))
        else:
            self.playButton.setIcon(
                    self.style().standardIcon(QStyle.SP_MediaPlay))
    def positionChanged(self, position):
        self.positionSlider.setValue(position)

    def durationChanged(self, duration):
        self.positionSlider.setRange(0, duration)

    def setPosition(self, position):
        self.mediaPlayer.setPosition(position)

    def valuechange(self):
        second = self.positionSlider2.value()
        time = secondToMunite(second)
        self.timeLabel.setText(time)
        self.parent.start_time = second
      # self.l1.setFont(QFont("Arial",size))

class ApplicationWindow(QWidget):
    def __init__(self):

        configfile = open("config.txt", "r")
        line = configfile.readlines()
        video_location = line[0].split('\n')
        output_location = line[1].split('\n')
        store_name = line[2].split('\n')

        location = video_location[0]
        output = output_location[0]
        store = store_name[0]
        self.VIDEO = ""
        self.DIRECTION = location
        self.STORE = store
        self.OUTPUT = output

        self.Length = 172
        self.split = 60
        self.start_time = 0
        QWidget.__init__(self)
        self.m_DragPosition=self.pos()
        self.m_drag = False
        self.resize(1080,800)
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setMouseTracking(True)
        self.setStyleSheet("QWidget{background-color:#f9f6e5;}")
        self._title = 'Check'
        self.setWindowTitle(self._title)

        # self.setCentralWidget(self._main)
        header = QLabel("CUSTOMER'S FLOW IN STORE", self)
        header.setStyleSheet("QLabel{background-color:#1d3a68;"
                                    "border:none;"
                                    "color:#ffffff;"
                                    "font:bold;"
                                    "font-size:20px;"
                                    "font-family:Meiryo UI;"
                                    "qproperty-alignment:AlignCenter;}")

        self.tab = mainTab(parent=self)
        self.tab.setStyleSheet("QWidget{background-color: #8da1c1;}")
        # self.layout = QVBoxLayout(self)
        # self.layout.addWidget(header)
        # self.layout.addWidget(header2)
        # self.setLayout(self.layout)

        # self.layout.setStretch(0, 3)
        # self.layout.setStretch(1, 8)

        header.setGeometry(0, 0, 1080, 150)
        self.tab.setGeometry(0, 150, 1080, 700)

    def mousePressEvent(self, event):
        if event.button()==Qt.LeftButton:
            self.m_drag=True
            self.m_DragPosition=event.globalPos()-self.pos()
            event.accept()

    def mouseMoveEvent(self, QMouseEvent):
        if QMouseEvent.buttons() and Qt.LeftButton and self.m_drag:
            self.move(QMouseEvent.globalPos()-self.m_DragPosition)
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_drag=False

    def setFolder(self):
        if QT_VERSION_STR[0] == '4':
            fileName2 = QFileDialog.getOpenFileName(None, "Open image file...", './Scan', "(*.PNG)")
        elif QT_VERSION_STR[0] == '5':
            fileName2 = str(QFileDialog.getExistingDirectory(self, "Select Directory"))

        self.DIRECTION = fileName2
        self.video_list.changeDirection(fileName2)

    def startCounting(self):
        dura = self.Length - self.start_time
        num = int(dura/self.split) + 1
        start = self.start_time
        self.result = resultTable(self)
        self.result.setGeometry(400, 650, 500, 150)
        # for i in range(0, num):
        #     ffmpeg_extract_subclip(self.VIDEO, start, start+self.split, targetname="Process/split" + str(i) + ".mp4")
        #     start = start + self.split

    def exportCSV(self):
        with open('test.csv', 'w') as stream:
            writer = csv.writer(stream)
            for row in range(self.result.rowCount()):
                rowdata = []
                for column in range(self.result.columnCount()):
                    item = self.result.item(row, column)
                    rowdata.append(item.text())
                    
                writer.writerow(rowdata)

if __name__ == "__main__":
    
    qapp = QtWidgets.QApplication(sys.argv)
    app = ApplicationWindow()
    app.show()
    sys.exit(qapp.exec_())
