import sys, os, io
import ntpath
import cv2
import numpy as np
import glob
import subprocess as sp
import json
from PyQt5 import QtCore, QtGui, QtWidgets, QtTest
from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer
from PyQt5.QtMultimediaWidgets import QVideoWidget, QGraphicsVideoItem
from PyQt5.QtCore import QDir, Qt, QUrl, Qt, QSize, QSizeF, QRectF, pyqtSignal, QRect, QPoint, QT_VERSION_STR
from PyQt5.QtWidgets import QSizePolicy, QSizePolicy, QSlider, QStyle, QMessageBox, QVBoxLayout, QApplication, QAction, QFrame, QMainWindow, QTableWidget, QWidget, QTextEdit, QPushButton, QLabel, QGraphicsView, QGraphicsScene, QFileDialog, QRubberBand, QStyleFactory, QHBoxLayout, QListWidget, QScrollArea
from PyQt5.QtGui import QPalette, QFont, QImage, QPixmap, QPainterPath, QIcon, QPen, QColor, QPainter, QScreen
from pymediainfo import MediaInfo
# from moviepy.video.io.ffmpeg_tools import ffmpeg_extract_subclip

IMAGEVIEWER_WIDTH = 480
IMAGEVIEWER_HEIGHT = 320
BUTTON_ZOOM_SIZE = 70
ICON_SIZE = 100
COLOR_RUBBER = [Qt.red, Qt.blue, Qt.green, Qt.yellow, Qt.gray]
COLOR_LABEL = ["red", "blue", "green", "yellow", "gray"]

def onclick(event):
    global clicks
    clicks.append(event.xdata)

class resultTable(QTableWidget):
     """docstring for resultTable"""
     def __init__(self, parent):
        super(resultTable, self).__init__(parent)
        # self.parent = parent
        # self.tableWidget = QTableWidget(self)
        # self.tableWidget.setRowCount(2)
        # self.tableWidget.setColumnCount(3)

        # header_labels = ['Time', 'In', 'Out']
        # self.tableWidget.setHorizontalHeaderLabels(header_labels)

        self.parent = parent
        self.setRowCount(2)
        self.setColumnCount(3)

        header_labels = ['Time', 'In', 'Out']
        self.setHorizontalHeaderLabels(header_labels)

class ConfigWidget(object):
    """docstring for ConfigWidget"""
    def __init__(self, parent):
        super(ConfigWidget, self).__init__(parent)
        self.parent = parent
        
def secondToMunite(sec):
    m = int(sec/60)
    s = sec - m*60
    result = str(m) + ":" + str(s)
    return result

class BtnTitlebar(QPushButton):
    def __init__(self, *args, **kwargs):
        super(BtnTitlebar, self).__init__(*args, **kwargs)
        self.m_ishover = False
        
    def paintEvent(self, evt):
        super(BtnTitlebar, self).paintEvent(evt)
        
    def isHover(self):
        return self.m_ishover
        
    def enterEvent(self, evt):
        self.m_ishover = True
        
    def leaveEvent(self, evt):
        self.m_ishover = False

class BtnFolder(BtnTitlebar):
    def __init__(self, *args, **kwargs):
        super(BtnFolder, self).__init__(*args, **kwargs)
        
    def paintEvent(self, evt):
        super(BtnFolder, self).paintEvent(evt)
        painter = QtGui.QPainter(self)
        if self.isDown() or self.isHover():
            self.setIcon(QIcon('Icon/openIcon2.png'))
            self.setIconSize(QSize(ICON_SIZE,ICON_SIZE))
        else:
            self.setIcon(QIcon('Icon/openIcon.png'))
            self.setIconSize(QSize(ICON_SIZE,ICON_SIZE))
  
class BtnConfig(BtnTitlebar):
    def __init__(self, *args, **kwargs):
        super(BtnConfig, self).__init__(*args, **kwargs)
        
    def paintEvent(self, evt):
        super(BtnConfig, self).paintEvent(evt)
        painter = QtGui.QPainter(self)
        if self.isDown() or self.isHover():
            self.setIcon(QIcon('Icon/cropIcon2.png'))
            self.setIconSize(QSize(ICON_SIZE,ICON_SIZE))
        else:
            self.setIcon(QIcon('Icon/cropIcon1.png'))
            self.setIconSize(QSize(ICON_SIZE,ICON_SIZE))

class BtnInfor(BtnTitlebar):
    def __init__(self, *args, **kwargs):
        super(BtnInfor, self).__init__(*args, **kwargs)
        
    def paintEvent(self, evt):
        super(BtnInfor, self).paintEvent(evt)
        painter = QtGui.QPainter(self)
        if self.isDown() or self.isHover():
            self.setIcon(QIcon('Icon/recognitionIcon1.png'))
            self.setIconSize(QSize(ICON_SIZE,ICON_SIZE))
        else:
            self.setIcon(QIcon('Icon/recognitionIcon2.png'))
            self.setIconSize(QSize(ICON_SIZE,ICON_SIZE))

class option_group(QWidget):

    def __init__(self, parent):
        super(option_group, self).__init__(parent)
        self.parent = parent
        self.layout = QVBoxLayout(self)
        self.layout.setSpacing(0)
        # self.layout.setAlignment(Qt.AlignTop)
        # self.itemList = []
        self.setLayout(self.layout)
        self.btn_folder = BtnFolder(self)
        self.btn_config = BtnConfig(self)
        self.btn_infor = BtnInfor(self)
        self.btn_folder.setSizePolicy(QSizePolicy.MinimumExpanding, QSizePolicy.Preferred)
        self.btn_config.setSizePolicy(QSizePolicy.MinimumExpanding, QSizePolicy.Preferred)
        self.btn_infor.setSizePolicy(QSizePolicy.MinimumExpanding, QSizePolicy.Preferred)


        # folder_wid = QWidget(self)
        # config_wid = QWidget(self)
        # infor_wid = QWidget(self)

        # folder_wid.setLayout(self.btn_folder)
        # config_wid.setLayout(self.btn_config)
        # infor_wid.setLayout(self.btn_infor)

        self.layout.addWidget(self.btn_folder)
        self.layout.addWidget(self.btn_config)
        self.layout.addWidget(self.btn_infor)
        
class btn_group(QWidget):
    def __init__(self, parent):
        super(btn_group, self).__init__(parent)
        self.parent = parent
        self.layout = QHBoxLayout(self)
        self.layout.setAlignment(Qt.AlignTop)
        self.setStyleSheet("QWidget{background-color:#3BAFDA;"
                                    "color:#ffffff;"
                                    "font:bold;"
                                    "font-size:16px;"
                                    "font-family:Meiryo UI;"
                                    "qproperty-alignment:AlignCenter;}")
        # self.til = "hello"
        # self.setWidgetResizable(True)
        self.initUI()

    def initUI(self):
        self.btn_start = QPushButton("Start Counting", self)
        self.btn_export = QPushButton("Export CSV", self)

        self.layout.addWidget(self.btn_start)
        self.layout.addWidget(self.btn_export)
        self.btn_start.clicked.connect(self.parent.startCounting)
        self.setLayout(self.layout)

class video_item(QWidget):
    def __init__(self, name, duration, parent):
        super(video_item, self).__init__(parent)
        self.parent = parent
        self.name = name
        self.layout = QVBoxLayout(self)
        self.duration = duration
        self.setLayout(self.layout)
        self.initUI(name, duration)

    def initUI(self, name, duration):
        
        # name_frame = frame_label(self)
        # duration_frame = frame_label(self)
        name_label = QLabel(str(name), self)
        name_label.setStyleSheet("QLabel{background-color:#4a93ca;"
                                    "border:none;"
                                    "color:#ffffff;"
                                    "font:bold;"
                                    "font-size:16px;"
                                    "font-family:Meiryo UI;"
                                    "qproperty-alignment:AlignCenter;}")
        duration_label = QLabel(str(duration), self)
        duration_label.setStyleSheet("QLabel{background-color:#3BAFDA;"
                                    "border:none;"
                                    "color:#ffffff;"
                                    "font:bold;"
                                    "font-size:16px;"
                                    "font-family:Meiryo UI;"
                                    "qproperty-alignment:AlignCenter;}")

        self.layout.addWidget(name_label)
        self.layout.addWidget(duration_label)
        self.layout.setStretch(0, 2)
        self.layout.setStretch(1, 1)

    def mousePressEvent(self, event):
        self.parent.parent.VIDEO = self.name
        self.parent.parent.Length = self.duration
        self.parent.parent.video_player.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile(self.name)))
        self.parent.parent.video_player.positionSlider2.setRange(0, int(self.duration))

class video_list(QScrollArea):
    def __init__(self, parent):
        super(video_list, self).__init__(parent)
        widget = QWidget()
        self.parent = parent
        self.layout = QVBoxLayout(widget)
        self.layout.setAlignment(Qt.AlignTop)
        self.itemList = []
        # self.til = "hello"
        self.setWidget(widget)
        self.setWidgetResizable(True)
        self.count = 0 
        self.initUI()

    def initUI(self):
        # media_info = MediaInfo.parse('D:/Counting/20180409.MP4')
        for file in glob.glob("vid/*.MP4"):
            # duration = getDuration("vid/20180217.MP4")
            print(file)
            media_info = MediaInfo.parse(file)
            duration_in_ms = media_info.tracks[0].duration
            duration = int(duration_in_ms/1000)
            print('duration: ' + str(duration))
            self.addVideo(str(file), duration)
            self.count = self.count + 1

    def addVideo(self, filename, duration):

        video = video_item(filename,duration,parent=self)
        print(type(video))
        self.itemList.append(video)
        print(type(self.itemList[self.count]))
        self.layout.addWidget(video,3)

    def changeDirection(self, newfolder):
        for i in reversed(range(self.layout.count())): 
            self.layout.itemAt(i).widget().setParent(None)

        self.count = 0
        print("new Directory: " + str(newfolder))
        for file in glob.glob(str(newfolder) + "/*.MP4"):
            print(file)
            videoname = file.split('/')
            name = videoname[len(videoname) - 1]
            media_info = MediaInfo.parse(file)
            duration_in_ms = media_info.tracks[0].duration
            duration = int(duration_in_ms/1000)
            print('duration: ' + str(duration))
            self.addVideo(str(name), duration)
            self.count = self.count + 1

class frame_label(QFrame):
    def __init__(self, parent):
        super(frame_label, self).__init__(parent)
        self.parent = parent

class videoplayer(QWidget):
    def __init__(self, parent):
        super(videoplayer, self).__init__(parent)

        self.parent = parent
        self.beginPoint = 0

        videoItem = QGraphicsVideoItem()
        # videoItem.setSize(QSizeF(640, 480))
        scene = QGraphicsScene(self)
        scene.addItem(videoItem)
        graphicsView = QGraphicsView(scene)
        # graphicsView.setSceneRect(Q)

        self.mediaPlayer = QMediaPlayer(None, QMediaPlayer.VideoSurface)
        self.mediaPlayer.setVideoOutput(videoItem)
        self.mediaPlayer.setMedia(QMediaContent(QUrl.fromLocalFile('D:/Counting/20180409.MP4')))
        # videoWidget = QVideoWidget()

        self.playButton = QPushButton()
        self.playButton.setEnabled(True)
        self.playButton.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.playButton.clicked.connect(self.play)

        self.positionSlider = QSlider(Qt.Horizontal)
        self.positionSlider.sliderMoved.connect(self.setPosition)
        self.positionSlider2 = QSlider(Qt.Horizontal)
        self.timeLabel = QLabel("00:00")
        self.positionSlider2.setRange(0, int(self.parent.Length))
        # self.positionSlider2.setStyleSheet("QSlider{color: blue;}")
        self.positionSlider2.sliderMoved.connect(self.valuechange)

        controlLayout = QtWidgets.QGridLayout(self)
        # controlLayout.setContentsMargins(0, 0, 0, 0)
        controlLayout.addWidget(self.playButton, 0, 0)
        controlLayout.addWidget(self.positionSlider, 0, 1)
        controlLayout.addWidget(self.positionSlider2, 1, 1)
        controlLayout.addWidget(self.timeLabel, 1, 0)

        controlLayout.setRowStretch(0, 1)
        controlLayout.setRowStretch(1, 1)
        controlLayout.setColumnStretch(0, 1)
        controlLayout.setColumnStretch(1, 10)

        control_wid = QWidget(self)
        control_wid.setLayout(controlLayout)

        layout = QVBoxLayout()
        layout.addWidget(graphicsView)
        layout.addWidget(control_wid)
        layout.setStretch(0, 4)
        layout.setStretch(1, 1)
        # layout.addWidget(self.positionSlider2)

        self.setLayout(layout)
        self.mediaPlayer.stateChanged.connect(self.mediaStateChanged)
        self.mediaPlayer.positionChanged.connect(self.positionChanged)
        self.mediaPlayer.durationChanged.connect(self.durationChanged)
        
        # self.playButton.setEnabled(True)
    
    # def valuechange(self):
    #   self.beginPoint = self.sl.value()

    def play(self):
        if self.mediaPlayer.state() == QMediaPlayer.PlayingState:
            self.mediaPlayer.pause()
        else:
            self.mediaPlayer.play()

    def mediaStateChanged(self, state):
        if self.mediaPlayer.state() == QMediaPlayer.PlayingState:
            self.playButton.setIcon(
                    self.style().standardIcon(QStyle.SP_MediaPause))
        else:
            self.playButton.setIcon(
                    self.style().standardIcon(QStyle.SP_MediaPlay))
    def positionChanged(self, position):
        self.positionSlider.setValue(position)

    def durationChanged(self, duration):
        self.positionSlider.setRange(0, duration)

    def setPosition(self, position):
        self.mediaPlayer.setPosition(position)

    def valuechange(self):
        second = self.positionSlider2.value()
        time = secondToMunite(second)
        self.timeLabel.setText(time)
        self.parent.start_time = second
      # self.l1.setFont(QFont("Arial",size))

class ApplicationWindow(QWidget):
    def __init__(self):

        self.VIDEO = "20180409.MP4"
        self.Length = 172
        self.split = 60
        self.start_time = 0
        QWidget.__init__(self)
        self.m_DragPosition=self.pos()
        self.m_drag = False
        self.resize(1080,800)
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setMouseTracking(True)
        self.setStyleSheet("QWidget{background-color:#2C3E50;}")
        self._title = 'Check'
        self.setWindowTitle(self._title)
        self.DIRECTION = "vid/"

        # self.setCentralWidget(self._main)

        self.header = QLabel("CUSTOMER'S FLOW IN STORE", 
            font=QFont("Times", 20, QtGui.QFont.Bold), 
            alignment=QtCore.Qt.AlignCenter)
        self.header.setStyleSheet('background-color: #355282; color: #ffffff')
        self.option = option_group(self)
        self.video_list = video_list(self)
        self.video_player = videoplayer(self)
        self.btn_group = btn_group(self)
        # self.result = resultTable(self)
        
        # layouts
        self.layout = QtWidgets.QGridLayout(self)
        # self.layout.setSpacing(0)
        self.layout.addWidget(self.header, 0, 0, 1, 3)
        self.layout.addWidget(self.option, 1, 0, 3, 1)
        self.layout.addWidget(self.video_list, 1, 1, 3, 1)
        self.layout.addWidget(self.video_player, 1, 2)
        self.layout.addWidget(self.btn_group, 2, 2)
        # self.layout.addWidget(self.result, 3, 2)

        self.layout.setColumnStretch(0, 2)
        self.layout.setColumnStretch(1, 3)
        self.layout.setColumnStretch(2, 9)
        self.layout.setRowStretch(0, 2)
        self.layout.setRowStretch(1, 6)
        self.layout.setRowStretch(2, 1)
        self.layout.setRowStretch(3, 2)

        self.content_widget = QWidget(self)
        self.content_widget.setLayout(self.layout)
        self.content_widget.setGeometry(QRect(0, 25, 1070, 700))
        self.option.btn_folder.clicked.connect(self.setFolder)

    def mousePressEvent(self, event):
        if event.button()==Qt.LeftButton:
            self.m_drag=True
            self.m_DragPosition=event.globalPos()-self.pos()
            event.accept()

    def mouseMoveEvent(self, QMouseEvent):
        if QMouseEvent.buttons() and Qt.LeftButton and self.m_drag:
            self.move(QMouseEvent.globalPos()-self.m_DragPosition)
            QMouseEvent.accept()

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_drag=False

    def setFolder(self):
        if QT_VERSION_STR[0] == '4':
            fileName2 = QFileDialog.getOpenFileName(None, "Open image file...", './Scan', "(*.PNG)")
        elif QT_VERSION_STR[0] == '5':
            fileName2 = str(QFileDialog.getExistingDirectory(self, "Select Directory"))

        self.DIRECTION = fileName2
        self.video_list.changeDirection(fileName2)

    def startCounting(self):
        dura = self.Length - self.start_time
        num = int(dura/self.split) + 1
        start = self.start_time
        # for i in range(0, num):
        #     ffmpeg_extract_subclip(self.VIDEO, start, start+self.split, targetname="Process/split" + str(i) + ".mp4")
        #     start = start + self.split

if __name__ == "__main__":
    
    qapp = QtWidgets.QApplication(sys.argv)
    app = ApplicationWindow()
    app.show()
    sys.exit(qapp.exec_())
